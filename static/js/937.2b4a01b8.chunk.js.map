{"version":3,"file":"static/js/937.2b4a01b8.chunk.js","mappings":"kOAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAItBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAInBC,EAAwB,SAAAL,GAAK,OAAqC,IAAjCD,EAAeC,GAAOM,MAA1B,EAE7BC,GAAoBC,EAAAA,EAAAA,IAC/B,CAACT,EALyB,SAAAC,GAAK,OAAIA,EAAMS,OAAOC,KAAjB,IAM7B,SAACT,EAAUQ,GACT,OAAKA,EAGAR,EAASQ,QAAO,SAAAE,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASL,EAAOI,cADf,IAFnBZ,EAASC,KAKrB,I,mBCnBUa,EAAaC,EAAAA,GAAAA,KAAH,2CAIVC,EAAaD,EAAAA,GAAAA,GAAH,kD,4BCAVE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXnB,GAAWoB,EAAAA,EAAAA,IAAYtB,GAuB5B,OACE,UAACgB,EAAD,CAAYO,SAtBO,SAAAC,GACpBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OAMjB,GAJsBzB,EAAS0B,MAC7B,SAAAhB,GAAO,OAAIA,EAAQC,OAASa,EAAKG,SAAShB,KAAKF,KAAxC,IAIP,OAAOmB,MAAM,GAAD,OAAIJ,EAAKG,SAAShB,KAAKF,MAAvB,4BAEZS,GACEW,EAAAA,EAAAA,IAAW,CACTlB,KAAMa,EAAKG,SAAShB,KAAKF,MACzBqB,MAAON,EAAKG,SAASI,OAAOtB,SAGhCe,EAAKQ,OAEP,EAGC,WACE,SAAChB,EAAD,yBACA,4BACE,qCAAmB,mBACnB,kBACEiB,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,mBACA,mBACA,uCAAqB,mBACrB,kBACEH,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBACA,mBACA,0BACE,mBAAQH,KAAK,SAAb,gCAKV,EAGDhB,EAAYoB,WAAa,CACvBhB,SAAUiB,IAAAA,KAAAA,YC/DL,I,EAAMC,EAAWxB,EAAAA,GAAAA,GAAH,kGCIRyB,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI9B,EAAmB,EAAnBA,KAAMoB,EAAa,EAAbA,OAC9Bb,GAAWC,EAAAA,EAAAA,MACjB,OACI,UAACoB,EAAD,YACI,4BAAO5B,EAAP,KAAeoB,MACf,mBAASE,KAAK,SAASS,QAAS,kBAAMxB,GAASyB,EAAAA,EAAAA,IAAcF,GAA7B,EAAhC,sBAFYA,EAKvB,ECTYG,EAAc,WACzB,IAAM5C,GAAWoB,EAAAA,EAAAA,IAAYd,GAE7B,OACE,wBACGN,EAAS6C,KAAI,gBAAGJ,EAAH,EAAGA,GAAI9B,EAAP,EAAOA,KAAMoB,EAAb,EAAaA,OAAb,OACZ,SAACS,EAAD,CAEEC,GAAIA,EACJ9B,KAAMA,EACNoB,OAAQA,GAHHU,EAFK,KAUnB,EClBYK,EAAe/B,EAAAA,GAAAA,IAAH,yE,UCEZgC,EAAS,WACpB,IAAM7B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC2B,EAAD,YACE,sDACA,mBACA,kBAAOb,KAAK,SAAUe,SARN,SAAA1B,GAClBJ,GAAS+B,EAAAA,EAAAA,IAAa3B,EAAI4B,cAAczC,OACzC,MASF,E,UCTY0C,EAAgB,WAC3B,IAAMjC,GAAWC,EAAAA,EAAAA,MACXiC,GAAkBhC,EAAAA,EAAAA,IAAYhB,GAC9BiD,GAAQjC,EAAAA,EAAAA,IAAYlB,GAM1B,OAJAoD,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,IAECmC,GAKH,iBAAKG,UAAU,UAAf,WACE,uCACA,SAACvC,EAAD,KACA,sCACA,SAAC8B,EAAD,IACCK,GACC,kFAEA,SAACR,EAAD,OAZGhB,MAAM,6BAehB,C","sources":["redux/contacts/selectors.jsx","components/ContactAddForm/ContactForm.styled.jsx","components/ContactAddForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectIsContactsEmpty = state => selectContacts(state).length === 0;\n\nexport const selectFilterValue = createSelector(\n  [selectContacts, selectFilter],\n    (contacts, filter) => {\n      if (!filter) {\n        return contacts.items;\n    }\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  padding: 30px; \n`;\n\nexport const FirstTitle = styled.h2`\n  margin - bottom: 15px;\n`;\n\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from \"redux/contacts/operations\";\nimport { selectContacts } from \"../../redux/contacts/selectors\";\nimport { FirstTitle, FormStyled } from './ContactForm.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();  \n  const contacts = useSelector(selectContacts);\n  \n  const  handleSubmit = evt =>{\n    evt.preventDefault();\n    const form = evt.target;\n\n    const repeatContact = contacts.find(\n      contact => contact.name === form.elements.name.value\n    );\n\n    if (repeatContact) {\n      return alert(`${form.elements.name.value} is already in contacts`);\n    } else {\n      dispatch(\n        addContact({\n          name: form.elements.name.value,\n          phone: form.elements.number.value,\n        })\n      );\n      form.reset();\n    }\n   };  \n\n   return (\n     <FormStyled onSubmit={handleSubmit}>\n       <FirstTitle>Phonebook</FirstTitle>\n       <div>\n         <label>Name</label><br />\n         <input\n           type=\"text\"         \n           name=\"name\"\n           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n           required\n         />\n         <br />\n         <br />\n         <label>Number</label><br />\n         <input\n           type=\"tel\"        \n           name=\"number\"\n           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n           required\n          />\n         <br />\n         <br />\n         <div>\n           <button type='submit'>Add contact</button>\n         </div>\n       </div>\n     </FormStyled>\n   );\n};\n\n\nContactForm.protoTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n\n\n\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  margin-top: 15px;\n  display: flex;\n  justify-content: space-between;\n`;\n\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ListItem } from './ContactItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\n\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    return (\n        <ListItem  key={id}>\n            <span>{name}: {number}</span>\n            <button  type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</button>\n        </ListItem>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,    \n};\n\n\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\n\nexport const ContactList = () => {  \n  const contacts = useSelector(selectFilterValue);\n  \n  return (   \n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}            \n        />\n      ))}\n    </ul>    \n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  padding-top: 10px; \n  margin - bottom: 25px;\n`;\n\n","import { FilterStyled } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch(); \n  \n  const filterValue = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n  \n  return (\n    <FilterStyled>\n      <label>Find contacts by name</label>\n      <br/>\n      <input type=\"search\"  onChange={filterValue} />\n    </FilterStyled>\n  );\n};\n\n\n\n","import { ContactForm } from 'components/ContactAddForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsContactsEmpty, selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\n\nexport const PhoneBookPage = () => {\n  const dispatch = useDispatch();\n  const isContactsEmpty = useSelector(selectIsContactsEmpty);\n  const Error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (!Error) {\n    return alert(`Oops, something went wrong`);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isContactsEmpty ? (\n        <h2>Contactbook is empty, please add your first contact!</h2>\n      ) : (\n        <ContactList />  )}    \n    </div>\n  );\n};"],"names":["selectContacts","state","contacts","items","selectError","error","selectIsContactsEmpty","length","selectFilterValue","createSelector","filter","value","contact","name","toLowerCase","includes","FormStyled","styled","FirstTitle","ContactForm","dispatch","useDispatch","useSelector","onSubmit","evt","preventDefault","form","target","find","elements","alert","addContact","phone","number","reset","type","pattern","title","required","protoTypes","PropTypes","ListItem","ContactItem","id","onClick","deleteContact","ContactList","map","FilterStyled","Filter","onChange","changeFilter","currentTarget","PhoneBookPage","isContactsEmpty","Error","useEffect","fetchContacts","className"],"sourceRoot":""}